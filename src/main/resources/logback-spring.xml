<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 应用名称 -->
    <springProperty scope="context" name="APP_NAME" source="spring.application.name" defaultValue="server"/>
    <springProperty scope="context" name="LOG_LEVEL" source="project.log.level" defaultValue="info"/>
    <!-- 日志文件 -->
    <property name="LOG_FILE" value="/app/logs/${APP_NAME}.log"/>

    <!-- 颜色渲染 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 设置字符集 -->
    <property name="LOG_CHARSET" value="UTF-8"/>
    <!-- 日志格式 -->
    <property name="LOG_PATTERN"
              value="%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN"
              value="%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 输出到控制台 -->
    <appender name="LOG_STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  时间滚动输出到文件 -->
    <appender name="LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${LOG_CHARSET}</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_FILE}</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天归档，如果文件在一天内超过maxFileSize，则归档文件时索引从0开始 -->
            <fileNamePattern>/app/logs/archived/${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 每个文件最大为100MB -->
            <maxFileSize>100MB</maxFileSize>
            <!-- 所有存档文件的总大小最大为5GB -->
            <totalSizeCap>5GB</totalSizeCap>
            <!-- 保留最多60天的存档文件，删除旧的 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>


    <appender name="ASYNC_STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 引用同步appender -->
        <appender-ref ref="LOG_STDOUT"/>

        <!-- 异步appender的参数配置 -->
        <queueSize>2048</queueSize> <!-- 队列大小 -->
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>1</discardingThreshold>
        <includeCallerData>true</includeCallerData>
    </appender>

    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 引用同步appender -->
        <appender-ref ref="LOG_FILE"/>

        <!-- 异步appender的参数配置 -->
        <queueSize>2048</queueSize> <!-- 队列大小 -->
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>1</discardingThreshold>
        <includeCallerData>true</includeCallerData>
    </appender>


    <root level="${LOG_LEVEL}">
        <appender-ref ref="ASYNC_STDOUT"/>
        <appender-ref ref="ASYNC_FILE"/>
    </root>

</configuration>