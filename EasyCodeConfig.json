{
  "author" : "rocks",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Pizza",
  "currTemplateGroupName" : "Pizza",
  "currColumnConfigGroupName" : "Pizza",
  "currGlobalConfigGroupName" : "Pizza",
  "typeMapper" : {
    "Pizza" : {
      "name" : "Pizza",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      } ]
    }
  },
  "template" : {
    "Pizza" : {
      "name" : "Pizza",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.common.validation.group.INSERT;\nimport $!{tableInfo.savePackageName}.common.validation.group.UPDATE;\nimport $!{tableInfo.savePackageName}.common.Page;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport $!{tableInfo.savePackageName}.model.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.req.$!{tableInfo.name}Query;\nimport $!{tableInfo.savePackageName}.common.DeleteIds;\nimport $!{tableInfo.savePackageName}.common.Response;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\n\nimport javax.validation.Valid;\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param query 分页参数\n     * @return $!{tableInfo.comment}列表\n     */\n    @PostMapping(\"/search\")\n    public Response<Page<$!{tableInfo.name}>> search(@Valid @RequestBody $!{tableInfo.name}Query query) {\n        Page<$!{tableInfo.name}> result = $!tool.firstLowerCase($tableInfo.name)Service.search(query);\n        return Response.success(result);\n    }\n\n    /**\n     * 新增$!{tableInfo.comment}\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} $!{tableInfo.comment}参数\n     * @return $!{tableInfo.comment}\n     */\n    @PostMapping(\"/add\")\n    public Response<$tableInfo.name> add(@Validated(INSERT.class) @RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        $tableInfo.name result = $!tool.firstLowerCase($tableInfo.name)Service.add($!{tool.firstLowerCase($tableInfo.name)});\n        return Response.success(result);\n    }\n    \n    /**\n     * 修改$!{tableInfo.comment}\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} $!{tableInfo.comment}参数\n     * @return $!{tableInfo.comment}\n     */\n    @PostMapping(\"/update\")\n    public Response<$tableInfo.name> update(@Validated(UPDATE.class) @RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        $tableInfo.name result = $!tool.firstLowerCase($tableInfo.name)Service.update($!{tool.firstLowerCase($tableInfo.name)});\n        return Response.success(result);\n    }\n    \n    /**\n     * 删除$!{tableInfo.comment}\n     *\n     * @param deleteIds 删除ids\n     * @return 删除结果\n     */\n    @PostMapping(\"/delete\")\n    public Response<Void> deleteById(@Validated @RequestBody DeleteIds deleteIds) {\n        $!tool.firstLowerCase($tableInfo.name)Service.deleteById(deleteIds);\n        return Response.success();\n    }\n\n}\n"
      }, {
        "name" : "debug.json.vm",
        "code" : "// 禁止将生成结果写入到文件\n$!callback.setWriteFile(false)\n\n//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n$!{init.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.model.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <select id=\"selectById\" resultMap=\"$!{tableInfo.name}Map\">\n        SELECT\n          #allSqlColumn()\n\n        FROM $!tableInfo.obj.name\n        WHERE $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <select id=\"search\" resultMap=\"$!{tableInfo.name}Map\">\n        SELECT\n          #allSqlColumn()\n\n        FROM $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                AND `$!column.obj.name` = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        INSERT INTO $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)`$!column.obj.name`#if($foreach.hasNext), #end#end)\n        VALUES (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($foreach.hasNext), #end#end)\n    </insert>\n\n    <insert id=\"inserts\"  parameterType=\"java.util.List\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        INSERT INTO $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)`$!column.obj.name`#if($foreach.hasNext), #end#end)\n        VALUES\n        <foreach collection=\"list\" item=\"item\" index=\"index\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{item.$!{column.name}}#if($foreach.hasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <update id=\"update\" parameterType=\"$!{tableInfo.savePackageName}.model.$!{tableInfo.name}\">\n        UPDATE $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                `$!column.obj.name` = #{$!column.name},\n            </if>\n#end\n        </set>\n        WHERE `$!pk.obj.name` = #{$!pk.name}\n    </update>\n    \n    <update id=\"updates\" parameterType=\"java.util.List\">\n        <foreach collection=\"list\" item=\"item\" index=\"index\" separator=\";\">\n            UPDATE $!{tableInfo.obj.name}\n            <set>\n    #foreach($column in $tableInfo.otherColumn)\n                <if test=\"item.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and item.$!column.name != ''#end\">\n                    `$!column.obj.name` = #{item.$!column.name},\n                </if>\n    #end\n            </set>\n            WHERE `$!pk.obj.name` = #{item.$!pk.name}\n        </foreach>\n    </update>\n\n    <delete id=\"deleteById\" parameterType=\"java.util.List\">\n        DELETE FROM $!{tableInfo.obj.name} WHERE `$!pk.obj.name` IN\n        <foreach item=\"id\" collection=\"ids\" open=\"(\" separator=\",\" close=\")\">\n            #{id}\n        </foreach>\n    </delete>\n    \n     <select id=\"exist\" resultType=\"java.lang.Boolean\">\n        SELECT EXISTS(\n        SELECT 1\n        FROM $!tableInfo.obj.name\n        WHERE `field` = #{field}\n        ) AS record_exists\n    </select>\n\n</mapper>\n"
      }, {
        "name" : "mapper.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.model.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.req.$!{tableInfo.name}Query;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Mapper\npublic interface $!{tableName} {\n\n    $!{tableInfo.name} selectById($!pk.shortType $!pk.name);\n \n    List<$!{tableInfo.name}> search($!{tableInfo.name}Query query);\n\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    int inserts(@Param(\"list\") List<$!{tableInfo.name}> list);\n\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    int updates(@Param(\"list\") List<$!{tableInfo.name}> list);\n    \n    int deleteById(@Param(\"ids\") List<$!pk.shortType> ids);\n    \n    boolean exist(String field);\n}\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport com.github.pagehelper.PageHelper;\nimport $!{tableInfo.savePackageName}.common.DeleteIds;\nimport $!{tableInfo.savePackageName}.common.Page;\nimport $!{tableInfo.savePackageName}.error.AppError;\nimport $!{tableInfo.savePackageName}.error.AppException;\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.model.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.req.$!{tableInfo.name}Query;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport javax.annotation.Resource;\n\n\n/**\n * $!{tableInfo.comment}\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} {\n\n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    public Page<$!{tableInfo.name}> search($!{tableInfo.name}Query query) {\n        ##PageHelper.startPage(query.getPageNum(), query.getPageSize());\n        List<$!{tableInfo.name}> results =  $!tool.firstLowerCase($!{tableInfo.name})Mapper.search(query);\n        return new Page<>(results);\n    }\n    \n    @Transactional(rollbackFor = Exception.class)\n    public $!{tableInfo.name} add($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        int result = $!tool.firstLowerCase($!{tableInfo.name})Mapper.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        if(result == 0){\n            throw new AppException(AppError.ADD_FAILED);\n        }\n        return $!tool.firstLowerCase($!{tableInfo.name})Mapper.selectById($tool.append($!tool.firstLowerCase($!{tableInfo.name}), \".get\",$!tool.firstUpperCase($!pk.name),\"()\"));\n    }\n    \n    @Transactional(rollbackFor = Exception.class)\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        int result = $!tool.firstLowerCase($!{tableInfo.name})Mapper.update($!tool.firstLowerCase($!{tableInfo.name}));\n        if(result == 0){\n            throw new AppException(AppError.UPDATE_FAILED);\n        }\n        return $!tool.firstLowerCase($!{tableInfo.name})Mapper.selectById($tool.append($!tool.firstLowerCase($!{tableInfo.name}), \".get\",$!tool.firstUpperCase($!pk.name),\"()\"));\n    }\n    \n    @Transactional(rollbackFor = Exception.class)\n    public void deleteById(DeleteIds deleteIds) {\n        int result = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById(deleteIds.getIds());\n        if (result == 0 ){\n            throw new AppException(AppError.DELETE_FAILED);\n        }\n    }\n}"
      }, {
        "name" : "model.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/model\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"model\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#set($excludes = $tool.newHashSet(\"createdTime\",\"updatedTime\",\"createdBy\",\"updatedBy\"))\n\nimport $!{tableInfo.savePackageName}.common.BaseModel;\nimport $!{tableInfo.savePackageName}.common.validation.group.INSERT;\nimport $!{tableInfo.savePackageName}.common.validation.group.UPDATE;\nimport lombok.Data;\nimport org.hibernate.validator.constraints.Length;\n\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Null;\nimport java.io.Serializable;\n\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Data\npublic class $!{tableInfo.name} extends BaseModel implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    #foreach($column in $tableInfo.fullColumn)\n    #if(!$excludes.contains($column.name))\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n     #if(${column.obj.isNotNull()})\n     \t#if($column.type.equals(\"java.lang.String\")) \n    \t\t@NotBlank(message = \"${column.comment}不能为空\")\n    \t\t@Length(max = $!{column.obj.dataType.length}, message = \"${column.comment}不能超过$!{column.obj.dataType.length}个字符\")\n   \t\t#else\n   \t\t    #if($column.name.equals($!pk.name))\n   \t\t        @Null(message = \"${column.comment}必须为空\", groups = INSERT.class)\n                @NotNull(message = \"${column.comment}不能为空\", groups = UPDATE.class)\n            #else\n                @NotNull(message = \"${column.comment}不能为空\")\n            #end\n   \t\t#end\n   \t #else\n   \t    #if($column.type.equals(\"java.lang.String\")) \n    \t\t@Length(max = $!{column.obj.dataType.length}, message = \"${column.comment}不能超过$!{column.obj.dataType.length}个字符\")\n   \t\t#end\n     #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n  #end\n#end\n\n}\n\n"
      }, {
        "name" : "page.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/param/req\", \"Query.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"param.req\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\n\nimport $!{tableInfo.savePackageName}.common.Pageable;\nimport lombok.Data;\nimport org.hibernate.validator.constraints.Length;\n\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\nimport java.io.Serializable;\nimport java.util.Date;\n\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}分页参数\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Data\npublic class $!{tableInfo.name}Query extends Pageable implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    #foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n     #if(${column.obj.isNotNull()})\n        #if($column.type.equals(\"java.lang.String\")) \n            @Length(max = $!{column.obj.dataType.length}, message = \"${column.comment}不能超过$!{column.obj.dataType.length}个字符\")\n        #end\n     #else\n        #if($column.type.equals(\"java.lang.String\")) \n            @Length(max = $!{column.obj.dataType.length}, message = \"${column.comment}不能超过$!{column.obj.dataType.length}个字符\")\n        #end\n     #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}\n"
      } ]
    }
  },
  "columnConfig" : {
    "Pizza" : {
      "name" : "Pizza",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Pizza" : {
      "name" : "Pizza",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"createdTime\", \"updatedTime\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.otherColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setOtherColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)`$column.obj.name`#if($foreach.hasNext), #end#end#end\n"
      } ]
    }
  }
}